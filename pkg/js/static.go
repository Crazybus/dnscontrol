// Code generated by "esc"; DO NOT EDIT.

package js

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/helpers.js": {
		name:    "helpers.js",
		local:   "pkg/js/helpers.js",
		size:    24044,
		modtime: 0,
		compressed: `
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
d8t9LET83wAAAP//cdKbKuxdAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
